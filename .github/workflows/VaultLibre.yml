name: VaultLibre Build And Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "**.json"
  schedule:
    - cron:  '11 */4 * * *'
  workflow_dispatch:
    inputs: {}

env:
  DOCKER_HUB: ayitaka
  DOCKER_HUB_REPO_API: vaultlibre-api
  DOCKER_HUB_REPO_IDENTITY: vaultlibre-identity
  DOCKER_HUB_REPO_LICENSEGEN: vaultlibre-licensegen
  
jobs:
  check_version:
    name: Check Last Built Version
    runs-on: ubuntu-latest

    outputs:
      newer_version: ${{ steps.check_version.outputs.newer_version }}
      bitwarden_core_version: ${{ steps.check_version.outputs.bitwarden_core_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Get Latest Version
        id: check_version
        run: |
          BITWARDEN_CORE_VERSION=$(curl -sL https://raw.githubusercontent.com/bitwarden/self-host/master/version.json | jq -r ".versions.coreVersion")
          VAULTLIBRE_CORE_VERSION=$(cat versions.json | jq -r '.versions.Bitwarden.coreVersion')
          VAULTLIBRE_REVISION=$(cat versions.json | jq -r '.versions.VaultLibre.revision')
          
          if [ $BITWARDEN_CORE_VERSION != $VAULTLIBRE_CORE_VERSION ]; then
            NEWER_VERSION=true
          else
            NEWER_VERSION=false          
          fi
          echo "newer_version=$NEWER_VERSION" >> $GITHUB_OUTPUT
          echo "bitwarden_core_version=$BITWARDEN_CORE_VERSION" >> $GITHUB_OUTPUT

  build_vaultlibre:
    name: Publish VaultLibre
    runs-on: ubuntu-latest
    needs: check_version
    if: ${{ needs.check_version.outputs.newer_version == 'true' || github.event_name == 'workflow_dispatch' }}
    ## || github.event_name == 'push' 

    env:
      BITWARDEN_CORE_VERSION: ${{ needs.check_version.outputs.bitwarden_core_version }}
      MESSAGE: "Update"
      
    outputs:
      vaultlibre_version: ${{ steps.set_version.outputs.vaultlibre_version }}
      release_note: ${{ steps.set_version.outputs.release_note }}
      commit_hash: ${{ steps.set_commit_hash.outputs.commit_hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        id: build_image

      - name: Build VaultLibre Images
        run: |
          docker build -f ./src/vaultlibre/Dockerfile --build-arg BITWARDEN_TAG=bitwarden/api:${BITWARDEN_CORE_VERSION} --label com.bitwarden.product="vaultlibre" -t ${DOCKER_HUB}/${DOCKER_HUB_REPO_API} .
          docker build -f ./src/vaultlibre/Dockerfile --build-arg BITWARDEN_TAG=bitwarden/identity:${BITWARDEN_CORE_VERSION} --label com.bitwarden.product="vaultlibre" -t ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY} .

      - name: Login
        run: |
          echo ${{ secrets.dockerPassword }} | docker login -u ${{ secrets.dockerID }} --password-stdin

      - name: Deploy Latest
        run: |
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_API} ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:latest
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY} ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:latest
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:latest
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:latest
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:latest Deployed
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:latest Deployed

      - name: Deploy Tag
        run: |
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_API} ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:${BITWARDEN_CORE_VERSION}
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY} ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:${BITWARDEN_CORE_VERSION}
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:${BITWARDEN_CORE_VERSION}
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:${BITWARDEN_CORE_VERSION}
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:${BITWARDEN_CORE_VERSION} Deployed
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:${BITWARDEN_CORE_VERSION} Deployed

      - name: Save Bitwarden/VaultLibre Version Numbers
        id: set_version
        run: |
          VAULTLIBRE_CORE_VERSION=$(cat versions.json | jq -r '.versions.Bitwarden.coreVersion')
          VAULTLIBRE_REVISION=$(cat versions.json | jq -r '.versions.VaultLibre.revision')
          VAULTLIBRE_SCRIPT_VERSION=$(cat versions.json | jq -r '.versions.VaultLibre.scriptVersion')
          VAULTLIBRE_CURRENT_SCRIPT_VERSION=$(sed -r -n "s/SCRIPT_VERSION=\"([0-9]+\.[0-9]+\.[0-9]+)\"/\1/p" vaultlibre.sh)

          ## Two ways to split the script version into it's separate parts for bumping major, minor, revision, etc.
          #oIFS="$IFS"; IFS='.'; declare -a arrVAULTLIBRE_SCRIPT_VERSION_SPLIT=($VAULTLIBRE_SCRIPT_VERSION); IFS="$oIFS"; unset oIFS;
          ## This one only works on newer versions of bash
          #IFS=\; read -a arrVAULTLIBRE_SCRIPT_VERSION_SPLIT <<<"$VAULTLIBRE_SCRIPT_VERSION"
          ## Another way using the cut command
          #VAULTLIBRE_SCRIPT_VERSION_MAJOR=$(echo "$VAULTLIBRE_SCRIPT_VERSION" | cut -d "." -f 1)
          #VAULTLIBRE_SCRIPT_VERSION_MINOR=$(echo "$VAULTLIBRE_SCRIPT_VERSION" | cut -d "." -f 2)
          #VAULTLIBRE_SCRIPT_VERSION_REVISION=$(echo "$VAULTLIBRE_SCRIPT_VERSION" | cut -d "." -f 3)

          if [ ${VAULTLIBRE_CORE_VERSION} == ${BITWARDEN_CORE_VERSION} ]; then
            VAULTLIBRE_REVISION=$(( ${VAULTLIBRE_REVISION} + 1 ))
            MESSAGE="VaultLibre Revision Update To ${BITWARDEN_CORE_VERSION}.${VAULTLIBRE_REVISION}"
          else
            VAULTLIBRE_REVISION=0
            MESSAGE="Bitwarden Core Version Update To ${BITWARDEN_CORE_VERSION}"
          fi

          echo "MESSAGE=${MESSAGE}" >> $GITHUB_ENV

          VAULTLIBRE_VERSION="${BITWARDEN_CORE_VERSION}.${VAULTLIBRE_REVISION}"
          
          #jq -n --arg coreversion "${BITWARDEN_CORE_VERSION}" --arg stepversion "${VAULTLIBRE_STEP_VERSION}" --arg vaultlibreversion "${VAULTLIBRE_VERSION}" '{versions: {Bitwarden: {coreVersion: $coreversion}, VaultLibre: {stepVersion: $stepversion, fullVersion: $vaultlibreversion}}}' > versions.json

          contents="$(jq --arg coreversion "${BITWARDEN_CORE_VERSION}" '.versions.Bitwarden.coreVersion = $coreversion' versions.json)" && echo -E "${contents}" > versions.json
          contents="$(jq --arg revision "${VAULTLIBRE_REVISION}" '.versions.VaultLibre.revision = $revision' versions.json)" && echo -E "${contents}" > versions.json
          contents="$(jq --arg vaultlibreversion "${VAULTLIBRE_VERSION}" '.versions.VaultLibre.fullVersion = $vaultlibreversion' versions.json)" && echo -E "${contents}" > versions.json
          contents="$(jq --arg scriptversion "${VAULTLIBRE_CURRENT_SCRIPT_VERSION}" '.versions.VaultLibre.scriptVersion = $scriptversion' versions.json)" && echo -E "${contents}" > versions.json

          echo "vaultlibre_version=$VAULTLIBRE_VERSION" >> $GITHUB_OUTPUT
          echo "release_note=$MESSAGE" >> $GITHUB_OUTPUT

          IDENTITY_SHA256="$( docker inspect --format='{{index .RepoDigests 0}}' ${DOCKER_HUB}/${DOCKER_HUB_REPO_IDENTITY}:${BITWARDEN_CORE_VERSION} )"
          API_SHA256="$( docker inspect --format='{{index .RepoDigests 0}}' ${DOCKER_HUB}/${DOCKER_HUB_REPO_API}:${BITWARDEN_CORE_VERSION} )"

          echo "${IDENTITY_SHA256}" > sha256-identity.txt
          echo "${API_SHA256}" > sha256-api.txt

      - name: Upload identity artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
            name: sha256-identity
            path: sha256-identity.txt

      - name: Upload api artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
            name: sha256-api
            path: sha256-api.txt

#      - name: Commit changes
#        uses: EndBug/add-and-commit@v4
#        with:
#          message: ${MESSAGE}
#          add: "versions.json"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit updated files
        run: |
          echo "MESSAGE: ${MESSAGE}"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "${MESSAGE}" -a

      - name: Push changes
        run: git push

      - name: Set Commit Hash
        id: set_commit_hash
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        
  build_license_generator:
    name: Publish License Generator
    runs-on: ubuntu-latest
    needs: [check_version, build_vaultlibre]
    if: ${{ needs.check_version.outputs.newer_version == 'true' || github.event_name == 'workflow_dispatch' }}
    ## || github.event_name == 'push' 

    env:
      BITWARDEN_CORE_VERSION: ${{ needs.check_version.outputs.bitwarden_core_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        id: build_image

      - name: Build Image
        run: |
          docker build -f ./src/licenseGen/Dockerfile --label com.bitwarden.product="licensegen" -t ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN} .

      - name: Login
        run: |
          echo ${{ secrets.dockerPassword }} | docker login -u ${{ secrets.dockerID }} --password-stdin

      - name: Deploy Latest
        run: |
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN} ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:latest
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:latest
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:latest Deployed

      - name: Deploy Tag
        run: |
          docker tag ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN} ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:${BITWARDEN_CORE_VERSION}
          docker push ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:${BITWARDEN_CORE_VERSION}
          echo ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:${BITWARDEN_CORE_VERSION} Deployed

      - name: Get Sha256
        id: get_sha256
        run: |
          LICENSEGEN_SHA256="$( docker inspect --format='{{index .RepoDigests 0}}' ${DOCKER_HUB}/${DOCKER_HUB_REPO_LICENSEGEN}:${BITWARDEN_CORE_VERSION} )"

          echo "${LICENSEGEN_SHA256}" > sha256-licensegen.txt

      - name: Upload licensegen artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
            name: sha256-licensegen
            path: sha256-licensegen.txt

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check_version, build_vaultlibre, build_license_generator]
    if: ${{ needs.check_version.outputs.newer_version == 'true' || github.event_name == 'workflow_dispatch' }}

    env:
      VAULTLIBRE_VERSION: ${{ needs.build_vaultlibre.outputs.vaultlibre_version }}
      RELEASE_NOTE: ${{ needs.build_vaultlibre.outputs.release_note }}
      COMMIT_HASH: ${{ needs.build_vaultlibre.outputs.commit_hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download all sha256 artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          path: sha256-files
          pattern: sha256-*
          merge-multiple: true

      - name: Merge sha256 files
        run: |
          ls -l sha256-files
          cat sha256-files/sha256-identity.txt sha256-files/sha256-api.txt sha256-files/sha256-licensegen.txt > sha256.txt

      - name: Upload sha256.txt
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: sha256.txt
          path: sha256.txt

      - name: Create Release
        uses: ncipollo/release-action@cdcc88a9acf3ca41c16c37bb7d21b9ad48560d87 # v1
        with:
          #commit: ${{ github.sha }}
          commit: ${{ needs.build_vaultlibre.outputs.commit_hash }}
          tag: "v${{ needs.build_vaultlibre.outputs.vaultlibre_version }}"
          name: "Version ${{ needs.build_vaultlibre.outputs.vaultlibre_version }}"
          body: "${{ needs.build_vaultlibre.outputs.release_note }}"
          artifacts: "sha256.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
          replacesArtifacts: false
          allowUpdates: true
          generateReleaseNotes: true
          discussionCategory: -releases
